const express = require('express');
const router = express.Router();
const User = require('../database/models/User'); // Chemin corrig√© selon ton architecture
const UserLocation = require('../database/models/UserLocation'); // √Ä cr√©er

// üõ°Ô∏è Fonction pour flouter les coordonn√©es (~100m de pr√©cision)
function blurCoordinates(lat, lng) {
    // Flouter √† ~0.001 degr√© = ~110m
    const precision = 0.001;
    return {
        latitude: Math.round(lat / precision) * precision,
        longitude: Math.round(lng / precision) * precision
    };
}

// üè† Fonction pour v√©rifier si position dans la Safe Place
function isInSafePlace(lat, lng, safePlace, radiusMeters = 200) {
    if (!safePlace || !safePlace.latitude || !safePlace.longitude) {
        return false;
    }

    // Calcul distance approximative en m√®tres
    const latDiff = lat - safePlace.latitude;
    const lngDiff = lng - safePlace.longitude;
    const distance = Math.sqrt(latDiff * latDiff + lngDiff * lngDiff) * 111320; // ~111km par degr√©

    return distance <= radiusMeters;
}

// üìç POST /users/location - Mettre √† jour la position
router.post('/location', async (req, res) => {
    try {
        const { userId, latitude, longitude, speed = 0 } = req.body;

        // Validation
        if (!userId || !latitude || !longitude) {
            return res.status(400).json({
                error: 'userId, latitude et longitude requis'
            });
        }

        // R√©cup√©rer l'utilisateur avec ses param√®tres
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }

        // V√©rifier si partage de localisation activ√©
        if (!user.socialSettings.shareLocation) {
            return res.status(200).json({
                message: 'Localisation d√©sactiv√©e',
                nearbyUsers: []
            });
        }

        // üè† V√©rifier Safe Place
        const inSafePlace = isInSafePlace(latitude, longitude, user.safePlace);

        // üõ°Ô∏è Flouter les coordonn√©es
        const blurredCoords = blurCoordinates(latitude, longitude);

        // D√©terminer visibilit√©
        const isMoving = speed > user.socialSettings.minSpeed;
        const shouldBeVisible = isMoving &&
            !inSafePlace &&
            user.socialSettings.visibleWhenMoving;

        // Mettre √† jour ou cr√©er UserLocation
        const locationUpdate = {
            coordinates: blurredCoords,
            speed: speed,
            isVisible: shouldBeVisible,
            lastUpdate: new Date()
        };

        // Si en mouvement, mettre √† jour lastMovement
        if (isMoving) {
            locationUpdate.lastMovement = new Date();
        }

        const userLocation = await UserLocation.findOneAndUpdate(
            { userId: userId },
            locationUpdate,
            { upsert: true, new: true }
        );

        // üë• Trouver les utilisateurs visibles √† proximit√©
        let nearbyUsers = [];
        const radius = user.socialSettings.visibilityRadius || 5;
        const nearbyLocations = await UserLocation.findVisibleUsersNearby(
            blurredCoords.latitude,
            blurredCoords.longitude,
            radius
        );

        // Filtrer et formater les donn√©es publiques
        nearbyUsers = nearbyLocations
            .filter(loc => loc.userId._id.toString() !== userId)
            .filter(loc => loc.userId.canBeSeenBy(user))
            .map(loc => ({
                id: loc.userId._id,
                username: loc.userId.username,
                avatar: loc.userId.avatar,
                coordinates: loc.coordinates, // D√©j√† flout√©es
                lastSeen: loc.lastMovement,
                // üèÜ FOCUS sur les r√©compenses et titres
                badges: loc.userId.badges.slice(-3), // 3 derniers badges/m√©dailles
                achievements: {
                    totalBadges: loc.userId.badges.length,
                    perfectQuizzes: loc.userId.stats.totalQuizPerfect,
                    bestStreak: loc.userId.stats.bestStreak,
                    // Titre bas√© sur le niveau
                    title: getTitleFromStats(loc.userId.stats),
                    // Coupe bas√©e sur les performances
                    trophy: getTrophyFromPerformance(loc.userId.stats)
                }
            }));


        res.status(200).json({
            success: true,
            isVisible: shouldBeVisible,
            inSafePlace: inSafePlace,
            nearbyUsers: nearbyUsers,
            userLocation: {
                coordinates: userLocation.coordinates,
                speed: userLocation.speed,
                lastUpdate: userLocation.lastUpdate
            }
        });

    } catch (error) {
        console.error('Erreur mise √† jour localisation:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// üè† POST /users/safe-place - D√©finir la Safe Place
router.post('/safe-place', async (req, res) => {
    try {
        const { userId, address, latitude, longitude } = req.body;

        if (!userId || !latitude || !longitude) {
            return res.status(400).json({
                error: 'userId, latitude et longitude requis'
            });
        }

        const user = await User.findByIdAndUpdate(
            userId,
            {
                safePlace: {
                    address: address || 'Mon domicile',
                    latitude: latitude,
                    longitude: longitude,
                    createdAt: new Date()
                }
            },
            { new: true }
        );

        if (!user) {
            return res.status(404).json({ error: 'Utilisateur non trouv√©' });
        }

        res.status(200).json({
            success: true,
            message: 'Safe Place d√©finie',
            safePlace: user.safePlace
        });

    } catch (error) {
        console.error('Erreur Safe Place:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// üèÜ Fonction pour d√©terminer le titre bas√© sur les stats
function getTitleFromStats(stats) {
    const completed = stats.totalQuizCompleted || 0;
    const perfect = stats.totalQuizPerfect || 0;

    if (perfect >= 50) return "Ma√Ætre Absolu";
    if (perfect >= 25) return "Expert L√©gende";
    if (perfect >= 10) return "As du Quiz";
    if (perfect >= 5) return "Champion";
    if (completed >= 100) return "V√©t√©ran";
    if (completed >= 50) return "Explorateur";
    if (completed >= 20) return "Aventurier";
    if (completed >= 10) return "Apprenti";
    return "D√©butant";
}

// üèÜ Fonction pour d√©terminer la coupe/troph√©e
function getTrophyFromPerformance(stats) {
    const avgScore = stats.averageScore || 0;
    const encha√Ænement = stats.bestStreak || 0; // bestStreak = meilleur encha√Ænement
    const perfect = stats.totalQuizPerfect || 0;

    // Troph√©es sp√©ciaux pour performances exceptionnelles
    if (avgScore >= 95 && perfect >= 20) return "üèÜ Troph√©e Diamant";
    if (avgScore >= 90 && perfect >= 15) return "ü•á M√©daille d'Or";
    if (avgScore >= 85 && perfect >= 10) return "ü•à M√©daille d'Argent";
    if (avgScore >= 80 && perfect >= 5) return "ü•â M√©daille de Bronze";

    // Troph√©es bas√©s sur les encha√Ænements
    if (encha√Ænement >= 20) return "üî• Coupe de Feu";
    if (encha√Ænement >= 10) return "‚ö° Coupe √âclair";
    if (encha√Ænement >= 5) return "‚≠ê √âtoile Montante";

    return "üéØ En progression";
}

// üßπ T√¢che de nettoyage - Masquer les utilisateurs inactifs
setInterval(async () => {
    try {
        await UserLocation.hideInactiveUsers();
        console.log('üßπ Nettoyage utilisateurs inactifs effectu√©');
    } catch (error) {
        console.error('Erreur nettoyage:', error);
    }
}, 60000); // Toutes les minutes




// üîß POST /users/fix-social - Ajouter socialSettings manquants
router.post('/fix-social', async (req, res) => {
    try {
        const { userId } = req.body;

        const user = await User.findByIdAndUpdate(userId, {
            $set: {
                socialSettings: {
                    visibleWhenMoving: true,
                    minSpeed: 2.0,
                    autoHideDelay: 180,
                    mapVisibility: true,
                    showProfile: true,
                    shareLocation: true,
                    visibilityRadius: 5,
                    allowMessages: true
                }
            }
        }, { new: true });

        res.json({
            success: true,
            message: "SocialSettings ajout√©s !",
            socialSettings: user.socialSettings
        });

    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// üß™ POST /users/test-activate - Activer les faux users pour les tests
router.post('/test-activate', async (req, res) => {
    try {
        console.log('üß™ Activation des faux users pour test...');

        // Positions dans Paris pour les faux users
        const testPositions = [
            {
                username: "JulieQuizPro",
                coordinates: { latitude: 48.8606, longitude: 2.3472 },
                speed: 3.5 // En mouvement √† pied
            },
            {
                username: "AishaVeteran",
                coordinates: { latitude: 48.8676, longitude: 2.3633 },
                speed: 4.2 // En mouvement
            },
            {
                username: "LucasChampion",
                coordinates: { latitude: 48.8540, longitude: 2.3359 },
                speed: 2.8 // En mouvement lent
            },
            {
                username: "EmmaExploratrice",
                coordinates: { latitude: 48.8420, longitude: 2.3219 },
                speed: 5.1 // En mouvement rapide
            },
            {
                username: "KarimStriker",
                coordinates: { latitude: 48.8826, longitude: 2.3379 },
                speed: 3.0 // En mouvement
            }
        ];

        let activatedCount = 0;

        for (const testUser of testPositions) {
            try {
                // Trouver l'utilisateur par username
                const user = await User.findOne({ username: testUser.username });
                if (!user) {
                    console.log(`‚ùå User ${testUser.username} non trouv√©`);
                    continue;
                }

                // Flouter les coordonn√©es comme en vrai
                const blurredCoords = blurCoordinates(
                    testUser.coordinates.latitude,
                    testUser.coordinates.longitude
                );

                // Cr√©er/mettre √† jour UserLocation
                await UserLocation.findOneAndUpdate(
                    { userId: user._id },
                    {
                        coordinates: blurredCoords,
                        speed: testUser.speed,
                        isVisible: true, // Forcer visible pour le test
                        lastMovement: new Date(),
                        lastUpdate: new Date()
                    },
                    { upsert: true, new: true }
                );

                activatedCount++;
                console.log(`‚úÖ ${testUser.username} activ√© √† ${blurredCoords.latitude}, ${blurredCoords.longitude}`);

            } catch (error) {
                console.error(`‚ùå Erreur activation ${testUser.username}:`, error);
            }
        }

        res.status(200).json({
            success: true,
            message: `${activatedCount} utilisateurs activ√©s pour le test`,
            activatedUsers: activatedCount,
            totalPositions: testPositions.length
        });

    } catch (error) {
        console.error('‚ùå Erreur activation test users:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// üß™ GET /users/test-status - Voir le statut des users actifs
router.get('/test-status', async (req, res) => {
    try {
        const activeUsers = await UserLocation.find({ isVisible: true })
            .populate('userId', 'username')
            .exec();

        const userStatus = activeUsers.map(loc => ({
            username: loc.userId.username,
            coordinates: loc.coordinates,
            speed: loc.speed,
            lastUpdate: loc.lastUpdate,
            lastMovement: loc.lastMovement
        }));

        res.status(200).json({
            success: true,
            activeUsersCount: activeUsers.length,
            users: userStatus
        });

    } catch (error) {
        console.error('‚ùå Erreur statut test:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});

// üßπ POST /users/test-cleanup - Nettoyer les donn√©es de test
router.post('/test-cleanup', async (req, res) => {
    try {
        const result = await UserLocation.deleteMany({});

        res.status(200).json({
            success: true,
            message: `${result.deletedCount} positions supprim√©es`,
            deletedCount: result.deletedCount
        });

    } catch (error) {
        console.error('‚ùå Erreur nettoyage test:', error);
        res.status(500).json({ error: 'Erreur serveur' });
    }
});



module.exports = router;